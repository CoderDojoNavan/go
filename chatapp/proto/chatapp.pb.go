// Code generated by protoc-gen-go.
// source: chatapp.proto
// DO NOT EDIT!

/*
Package chatapp is a generated protocol buffer package.

It is generated from these files:
	chatapp.proto

It has these top-level messages:
	Empty
	RegisterRequest
	RegisterResponse
	Message
*/
package chatapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Just empty
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Register the bot with the server
type RegisterRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// get the token back so it can be used in the requests
type RegisterResponse struct {
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Message contains the individual messages send to and from the server
type Message struct {
	// The token identifies the bot with the server, it is only set by the bot in
	// the message.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// Name of the person sending the message
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Data is the binary message to be send to the server, for now it will be
	// converted to string, but its still worth keeping it in binary form.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Message) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Message) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "chatapp.Empty")
	proto.RegisterType((*RegisterRequest)(nil), "chatapp.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "chatapp.RegisterResponse")
	proto.RegisterType((*Message)(nil), "chatapp.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatAppService service

type ChatAppServiceClient interface {
	// Register registers a bot. It takes in the RegisterRequest with a name of
	// the bot and returns a token
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Listen for all incoming messages
	Listen(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChatAppService_ListenClient, error)
	// Broadcast to all
	Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	// Disconnect from the server with a message
	Disconnect(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
}

type chatAppServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatAppServiceClient(cc *grpc.ClientConn) ChatAppServiceClient {
	return &chatAppServiceClient{cc}
}

func (c *chatAppServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/chatapp.ChatAppService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppServiceClient) Listen(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChatAppService_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatAppService_serviceDesc.Streams[0], c.cc, "/chatapp.ChatAppService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatAppServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatAppService_ListenClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatAppServiceListenClient struct {
	grpc.ClientStream
}

func (x *chatAppServiceListenClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatAppServiceClient) Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chatapp.ChatAppService/Broadcast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppServiceClient) Disconnect(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chatapp.ChatAppService/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatAppService service

type ChatAppServiceServer interface {
	// Register registers a bot. It takes in the RegisterRequest with a name of
	// the bot and returns a token
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Listen for all incoming messages
	Listen(*Message, ChatAppService_ListenServer) error
	// Broadcast to all
	Broadcast(context.Context, *Message) (*Empty, error)
	// Disconnect from the server with a message
	Disconnect(context.Context, *Message) (*Empty, error)
}

func RegisterChatAppServiceServer(s *grpc.Server, srv ChatAppServiceServer) {
	s.RegisterService(&_ChatAppService_serviceDesc, srv)
}

func _ChatAppService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatapp.ChatAppService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAppService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatAppServiceServer).Listen(m, &chatAppServiceListenServer{stream})
}

type ChatAppService_ListenServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatAppServiceListenServer struct {
	grpc.ServerStream
}

func (x *chatAppServiceListenServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatAppService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatapp.ChatAppService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).Broadcast(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAppService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatapp.ChatAppService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).Disconnect(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatAppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatapp.ChatAppService",
	HandlerType: (*ChatAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ChatAppService_Register_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _ChatAppService_Broadcast_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ChatAppService_Disconnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _ChatAppService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatapp.proto",
}

func init() { proto.RegisterFile("chatapp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0xd9, 0x6a, 0x1b, 0x3b, 0x68, 0x2d, 0x83, 0x87, 0xd8, 0x53, 0x09, 0x08, 0xb9, 0x18,
	0x44, 0x1f, 0x40, 0xfc, 0x87, 0x17, 0xbd, 0xc4, 0x27, 0x18, 0xb7, 0x43, 0x1b, 0xa4, 0xbb, 0x6b,
	0x66, 0x14, 0x7c, 0x5b, 0x1f, 0x45, 0xba, 0xa6, 0x69, 0xd1, 0x1c, 0x7a, 0x9b, 0xf9, 0xed, 0xb7,
	0xc3, 0xb7, 0x3b, 0x70, 0x64, 0x17, 0xa4, 0x14, 0x42, 0x11, 0x6a, 0xaf, 0x1e, 0x93, 0xa6, 0xcd,
	0x12, 0xe8, 0x3f, 0x2c, 0x83, 0x7e, 0x65, 0x67, 0x70, 0x5c, 0xf2, 0xbc, 0x12, 0xe5, 0xba, 0xe4,
	0xf7, 0x0f, 0x16, 0x45, 0x84, 0x7d, 0x47, 0x4b, 0x4e, 0xcd, 0xd4, 0xe4, 0xc3, 0x32, 0xd6, 0x59,
	0x0e, 0xe3, 0x0d, 0x26, 0xc1, 0x3b, 0x61, 0x3c, 0x81, 0xbe, 0xfa, 0x37, 0x76, 0x69, 0x2f, 0x82,
	0xbf, 0x4d, 0xf6, 0x08, 0xc9, 0x33, 0x8b, 0xd0, 0x7c, 0x0b, 0x30, 0x5b, 0x40, 0x3b, 0xbe, 0xb7,
	0x19, 0xbf, 0xca, 0x66, 0xa4, 0x94, 0xee, 0x4d, 0x4d, 0x7e, 0x58, 0xc6, 0xfa, 0xf2, 0xdb, 0xc0,
	0xe8, 0x6e, 0x41, 0x7a, 0x13, 0xc2, 0x0b, 0xd7, 0x9f, 0x95, 0x65, 0xbc, 0x86, 0x83, 0xb5, 0x05,
	0xa6, 0xc5, 0xfa, 0x69, 0x7f, 0xfc, 0x27, 0xa7, 0x1d, 0x27, 0x8d, 0x72, 0x01, 0x83, 0xa7, 0x55,
	0xe2, 0x70, 0xdc, 0x42, 0x8d, 0xed, 0xe4, 0x5f, 0x72, 0x61, 0xf0, 0x1c, 0x86, 0xb7, 0xb5, 0xa7,
	0x99, 0x25, 0xd1, 0x8e, 0x2b, 0xa3, 0x36, 0x89, 0x9f, 0x89, 0x05, 0xc0, 0x7d, 0x25, 0xd6, 0x3b,
	0xc7, 0x76, 0x07, 0xfe, 0x75, 0x10, 0xb7, 0x72, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x37,
	0x9c, 0x22, 0xa6, 0x01, 0x00, 0x00,
}
